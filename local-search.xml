<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>中序遍历</title>
    <link href="/2020/10/18/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2020/10/18/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p><img src="file://C:/Users/ybj/AppData/Roaming/Typora/typora-user-images/image-20201006202946349.png?lastModify=1601987529" alt="image-20201006202946349"></p><p>前序遍历为：1，2，4，5，3，6，7</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pro</span><span class="hljs-params">(node root)</span><span class="hljs-comment">// 前序递归 前序遍历：根结点 ---&gt; 左子树 ---&gt; 右子树</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">return</span>;    &#125;System.out.print(root.val);<span class="hljs-comment">// 当前节点</span>pro(root.left);pro(root.right);&#125;</code></pre><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>中序遍历为：4，2，5，1，6，3，7</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mid</span><span class="hljs-params">(node root)</span><span class="hljs-comment">// 中序递归 中序遍历：左子树 ----&gt;根节点---&gt; 右子树</span></span><span class="hljs-function"></span>&#123;   <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>)&#123;    <span class="hljs-keyword">return</span> ;    &#125;mid(root.left);System.out.print(root.val);<span class="hljs-comment">// 当前节点</span>mid(root.right);&#125;</code></pre><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>后序遍历：4，5，2，6，7，3，1</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">(node root)</span><span class="hljs-comment">// 后序递归 后序遍历：左子树 ---&gt; 右子树---&gt;根节点</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">return</span>;    &#125;after(root.left);after(root.right);    System.out.print(root.val);<span class="hljs-comment">// 当前节点</span>&#125;</code></pre><h2 id="深度优先遍历非递归（栈）"><a href="#深度优先遍历非递归（栈）" class="headerlink" title="深度优先遍历非递归（栈）"></a>深度优先遍历非递归（栈）</h2><p><img src="C:\Users\ybj\AppData\Roaming\Typora\typora-user-images\image-20201006202946349.png" alt="image-20201006202946349"></p><p>深度优先遍历的顺序是1，2，4，5，3，6，7</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">treeDFS</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<span class="hljs-comment">//一层一层的往深处走</span>    Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();    stack.add(root);    <span class="hljs-keyword">while</span> (!stack.empty()) &#123;        <span class="hljs-comment">//出栈最外面的一个，则为左子节点</span>        TreeNode node = stack.pop();        System.out.println(node.val);        <span class="hljs-keyword">if</span> (node.right != <span class="hljs-keyword">null</span>) &#123;            stack.push(node.right);        &#125;        <span class="hljs-keyword">if</span> (node.left != <span class="hljs-keyword">null</span>) &#123;            stack.push(node.left);        &#125;    &#125;&#125;</code></pre><h2 id="层次遍历（队列）"><a href="#层次遍历（队列）" class="headerlink" title="层次遍历（队列）"></a>层次遍历（队列）</h2><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;        <span class="hljs-comment">//创建一个二维动态数组，也是我们返回的数组</span>          List&lt;List&lt;Integer&gt;&gt; arr = <span class="hljs-keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();          <span class="hljs-comment">//创建队列</span>          Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;TreeNode&gt;();       <span class="hljs-comment">//边界情况</span>          <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)&#123;              <span class="hljs-keyword">return</span> arr;          &#125;          <span class="hljs-comment">//将root节点存进去，这一步很重要，不然会一直输出空</span>          queue.offer(root);          <span class="hljs-comment">//执行完毕条件</span>          <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;              <span class="hljs-comment">//构建一个一维动态数组，这个用来存储每层的遍历结果</span>              List&lt;Integer&gt; array = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();              <span class="hljs-comment">//获得当前队列的大小，这里记住要用一个变量接收，因为队列的大小是会改变的</span>              <span class="hljs-keyword">int</span> size = queue.size();              <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; size ;i++)&#123;                    <span class="hljs-comment">//队列出列</span>                     TreeNode p = queue.poll();                     <span class="hljs-comment">//将出列的节点的值，存入一维数组中</span>                     array.add(p.val);                     <span class="hljs-comment">//左孩子和右孩子</span>                     TreeNode left = p.left;                     TreeNode right =p.right;                        <span class="hljs-comment">//将左右孩子入队               </span>                     <span class="hljs-keyword">if</span>(p.left!=<span class="hljs-keyword">null</span>)&#123;                         queue.offer(left);                     &#125;                     <span class="hljs-keyword">if</span>(p.right!=<span class="hljs-keyword">null</span>)&#123;                         queue.offer(right);                     &#125;              &#125;              arr.add(array);          &#125;        <span class="hljs-keyword">return</span> arr;    &#125;&#125;</code></pre><p>这个代码会将节点分层显示，如果想一行显示，可以创建一维的动态数组，入队出队即可。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2020/10/17/2.%E8%AF%A5%E5%A6%82%E4%BD%95%E7%A7%BB%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0%EF%BC%9F/"/>
    <url>/2020/10/17/2.%E8%AF%A5%E5%A6%82%E4%BD%95%E7%A7%BB%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27.移除元素"></a>27.移除元素</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>woshinibaba</title>
    <link href="/2020/10/17/woshinibaba/"/>
    <url>/2020/10/17/woshinibaba/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我是i爸爸</title>
    <link href="/2020/10/17/%E6%88%91%E6%98%AFi%E7%88%B8%E7%88%B8/"/>
    <url>/2020/10/17/%E6%88%91%E6%98%AFi%E7%88%B8%E7%88%B8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我是你的二舅</title>
    <link href="/2020/10/17/%E6%88%91%E6%98%AF%E4%BD%A0%E7%9A%84%E4%BA%8C%E8%88%85/"/>
    <url>/2020/10/17/%E6%88%91%E6%98%AF%E4%BD%A0%E7%9A%84%E4%BA%8C%E8%88%85/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/17/hello-world/"/>
    <url>/2020/10/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
